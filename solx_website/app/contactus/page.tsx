"use client";

import { CustomButton, InputField, ProcessModel } from "@components";
import { ContactUsType } from "@types";
import { JWT } from "google-auth-library";
import { GoogleSpreadsheet } from "google-spreadsheet";
import { useRouter } from "next/navigation";
import { ChangeEvent, useState } from "react";

// Config variables
const SPREADSHEET_ID = process.env.NEXT_PUBLIC_SPREADSHEET_ID;
const SHEET_ID = process.env.NEXT_PUBLIC_SHEET_ID;
const GOOGLE_CLIENT_EMAIL = process.env.NEXT_PUBLIC_GOOGLE_CLIENT_EMAIL;
const GOOGLE_SERVICE_PRIVATE_KEY =
  process.env.NEXT_PUBLIC_GOOGLE_SERVICE_PRIVATE_KEY;

const serviceAccountAuth = new JWT({
  // env var values here are copied from service account credentials generated by google
  // see "Authentication" section in docs for more info
  email: GOOGLE_CLIENT_EMAIL,
  key: GOOGLE_SERVICE_PRIVATE_KEY,
  scopes: ["https://www.googleapis.com/auth/spreadsheets"],
});

const ContactUsPage = () => {
  const router = useRouter();
  const [isLoading, setIsLoading] = useState(false);
  const [isError, setIsError] = useState(false);
  const [openModal, setOpenModal] = useState(false);

  const [formData, setFormData] = useState<ContactUsType>({
    email: "",
    firstName: "",
    lastName: "",
    phone: "",
    query: "",
  });

  const handleOnChange = (event: ChangeEvent<HTMLInputElement>) => {
    const name = event.target.name;
    const value = event.target.value;
    setFormData((prevState) => ({
      ...prevState,
      [name]: value,
    }));
  };

  const doc = new GoogleSpreadsheet(SPREADSHEET_ID ?? "", serviceAccountAuth);

  const handlerSubmit = async (event: any) => {
    event.preventDefault();
    setOpenModal(true);
    setIsLoading(true);
    try {
      await doc.loadInfo();
      console.log(doc.title);
      const sheet = doc.sheetsByIndex[0];
      const newRow = await sheet.addRow({
        ...formData,
      });
      console.log(newRow);
      setFormData({
        email: "",
        firstName: "",
        lastName: "",
        phone: "",
        query: "",
      });
      setIsLoading(false);
    } catch (e) {
      setIsError(true);
      console.log(e);
    }
  };

  return (
    <>
      <div className="overflow-hidden xl:h-screen flex-center flex-1 padding-x pt-36 relative">
        <div className="w-1/2 absolute bg-light_green px-5 py-10 rounded-xl">
          <form onSubmit={handlerSubmit}>
            <div className="flex justify-between gap-4">
              <InputField
                id="first_name"
                label="First Name"
                name="firstName"
                required
                onChangeHandler={handleOnChange}
                value={formData.firstName}
              />
              <InputField
                id="last_name"
                label="Last Name"
                name="lastName"
                required
                onChangeHandler={handleOnChange}
                value={formData.lastName}
              />
            </div>
            <div className="flex justify-between gap-4">
              <InputField
                id="email"
                label="Email"
                required
                name="email"
                onChangeHandler={handleOnChange}
                value={formData.email}
              />
              <InputField
                id="phone"
                label="Phone"
                name="phone"
                required
                onChangeHandler={handleOnChange}
                value={formData.phone}
              />
            </div>
            {/* Text Field */}
            <div className="flex flex-col gap-2 pb-4 w-full">
              <label htmlFor={"query"} className="text-xl font-medium">
                Your Query
              </label>
              <textarea
                id={"query"}
                name={"query"}
                className="w-full bg-cream rounded-xl px-4 py-2 border-collapse"
                required
                onChange={(e) => handleOnChange(e as any)}
                value={formData.query}
              />
            </div>
            <CustomButton
              title="Send Query"
              containerStyles="rounded-xl bg-orange text-xl font-medium w-1/2 mx-auto mt-8 hover:shadow-md"
            />
          </form>
        </div>
      </div>
      <ProcessModel
        isError={isError}
        isLoading={isLoading}
        isOpen={openModal}
        isSuccess={!isLoading}
        message="We have taken your query, we will get back to you in 24 hrs."
        onClose={() => setOpenModal(false)}
        onSuccessStop={() => {
          setTimeout(() => {
            router.replace("/");
          }, 2000);
        }}
      />
    </>
  );
};

export default ContactUsPage;
